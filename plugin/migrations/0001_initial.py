# Generated by Django 5.2 on 2025-08-22 10:34

import django.db.models.deletion
import plugin.enums
import utils.nanoid_utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("company", "0004_remove_location_unique_location_and_more"),
        ("department", "0002_alter_department_access_department"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Plugin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("access_level", models.IntegerField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "uid",
                    models.CharField(
                        db_index=True,
                        default=utils.nanoid_utils.default_nanoid,
                        editable=False,
                        max_length=21,
                        unique=True,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            (plugin.enums.PluginProvider["NSDL"], "nsdl"),
                            (plugin.enums.PluginProvider["UNISEN"], "unisen"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "service",
                    models.CharField(
                        choices=[
                            (
                                plugin.enums.PluginService["PAN_VALIDATION"],
                                "pan_validation",
                            ),
                            (
                                plugin.enums.PluginService["PAN_ELIGIBILITY"],
                                "pan_eligibility",
                            ),
                        ],
                        max_length=255,
                    ),
                ),
                ("username", models.CharField(blank=True, max_length=255, null=True)),
                ("password", models.CharField(blank=True, max_length=255, null=True)),
                ("api_key", models.TextField(blank=True, null=True)),
                (
                    "access_department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="department.department",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="company.company",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="company.location",
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_owners",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Plugin",
                "verbose_name_plural": "Plugins",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                models.Q(
                                    ("password__isnull", False),
                                    ("username__isnull", False),
                                ),
                                models.Q(
                                    ("password__exact", ""),
                                    ("username__exact", ""),
                                    _negated=True,
                                ),
                            ),
                            models.Q(
                                models.Q(("api_key__isnull", False)),
                                models.Q(("api_key__exact", ""), _negated=True),
                            ),
                            _connector="OR",
                        ),
                        name="either_username_password_or_api_key_required",
                        violation_error_message="Either username and password or api_key must be provided.",
                    )
                ],
            },
        ),
    ]
